#!/usr/bin/env bash

set -e
function setup() {
  git remote update
  git fetch
}
function master() {
  # git pull origin master
  git checkout origin/master || git checkout -t -b master origin/master || setup && git checkout --track origin/master || throwError "Unable to checkout master."
}
function stage() {
  git checkout stage || throwError "Unable to checkout stage."
}
function version() {
  local __version=$1
  local version=`node -pe 'JSON.parse(process.argv[1]).version' "$(cat bower.json)"`
  eval $__version="'$version'"
}
function throwError() {
  echo $1
  exit 1
}
function processStage() {
  # First read version number from the master branch.
  master
  version elementVersion || throwError "Error to read element version number."
  stage
  ./node_modules/.bin/arc bump $elementVersion || throwError "Unable to bump version"
  ./node_modules/.bin/arc docs || throwError "Unable to generate docs"
  ./node_modules/.bin/arc changelog || throwError "Unable to build changelog"
  git add -A
  git commit -m "[CI] Automated commit after stage build (bump, docs, changelog)." || throwError "Unable to commit changes to stage. Exiting."

  echo "Stage updated, merging with master"
  master
  git merge --no-ff -m "[CI] Automated merge stage->master" stage || throwError "Unable to merge changes to master. Exiting."
  git add -A
  git commit -m "[CI] Automated commit after merge stage->master"
  git push origin master || throwError "Unable to push changes to master. Exiting."
  stage
  git push origin stage || {
    echo "Changes to master has been made, however error occurred when pushing changes to the stage. Please, merge stage manually from master."
    exit 0;
  }
}


if [[ "${TRAVIS_PULL_REQUEST}" == "false" ]] && [[ "${TRAVIS_BRANCH}" == "stage" ]]; then
  echo "Updating stage branch and merging with master..."
  processStage
  exit
fi

if [[ "${TRAVIS_PULL_REQUEST}" == "false" ]] && [[ "${TRAVIS_BRANCH}" == "master" ]]; then
  echo "Deploying release to master branch..."
  exit
fi

echo "Nothing to do"
exit
