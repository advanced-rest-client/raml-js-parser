#!/usr/bin/env bash

function master() {
  # git pull origin master
  git checkout master
}
function stage() {
  git checkout stage
}

function version() {
  local __version=$1
  local version=`node -pe 'JSON.parse(process.argv[1]).version' "$(cat bower.json)"`
  eval $__version="'$version'"
}
function headHash() {
  local __hash=$1
  local gitHash=`git rev-parse --short HEAD`
  eval $__hash="'$gitHash'"
}
function revertChanges() {
  echo "Resetting branch after error to $1"
  git reset --hard $1
}
function revertChangesAndExit() {
  revertChanges $1
  exit 1
}
function processStage() {
  # First read version number from the master branch.
  master
  version elementVersion || {
    echo "Error to read element version number."
    exit 1
  }
  headHash masterHash || {
    echo "Error to read maste's HEAD hash."
    exit 1
  }
  stage
  headHash stageHash || {
    echo "Can't read stage's HEAD hash :("
    exit 1;
  }
  ./node_modules/.bin/arc bump $elementVersion || revertChangesAndExit stageHash
  ./node_modules/.bin/arc docs || revertChangesAndExit stageHash
  ./node_modules/.bin/arc changelog || revertChangesAndExit stageHash
  git add -A
  git commit -m "[CI] Automated commit after stage build (bump, docs, changelog)." || revertChangesAndExit stageHash

  echo "Stage updated, merging with master"
  master
  git merge --no-ff -m "[CI] Automated merge stage->master" stage || {
    echo "Unable to merge changes to master."
    stage
    revertChangesAndExit stageHash
  }
  git add -A
  git commit -m "[CI] Automated commit after merge stage->master"
  git push origin master || {
    echo "Unable to push changes to master."
    revertChanges masterHash
    stage
    revertChangesAndExit stageHash
  }
  stage
  git push origin stage || {
    echo "Changes to master has been made, however error occurred when pushing changes to the stage. Please, merge stage manually from master."
    exit 1;
  }
}


if [[ "${TRAVIS_PULL_REQUEST}" == "false" ]] && [[ "${TRAVIS_BRANCH}" == "stage" ]]; then
  echo "Updating stage branch and merging with master..."
  processStage
  exit
fi

if [[ "${TRAVIS_PULL_REQUEST}" == "false" ]] && [[ "${TRAVIS_BRANCH}" == "master" ]]; then
  echo "Deploying release to master branch..."
  exit
fi

echo "Nothing to do"
exit
